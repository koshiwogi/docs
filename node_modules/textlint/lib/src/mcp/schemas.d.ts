import { z } from "zod";
/**
 * Zod schema for TextlintMessage that matches the TextlintMessage interface
 * from @textlint/types
 */
export declare const TextlintMessageSchema: z.ZodObject<{
    ruleId: z.ZodOptional<z.ZodString>;
    message: z.ZodString;
    line: z.ZodNumber;
    column: z.ZodNumber;
    severity: z.ZodNumber;
    fix: z.ZodOptional<z.ZodObject<{
        range: z.ZodArray<z.ZodNumber, "many">;
        text: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        range: number[];
        text: string;
    }, {
        range: number[];
        text: string;
    }>>;
    type: z.ZodOptional<z.ZodString>;
    data: z.ZodOptional<z.ZodUnknown>;
    index: z.ZodOptional<z.ZodNumber>;
    range: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
    loc: z.ZodOptional<z.ZodObject<{
        start: z.ZodObject<{
            line: z.ZodNumber;
            column: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            line: number;
            column: number;
        }, {
            line: number;
            column: number;
        }>;
        end: z.ZodObject<{
            line: z.ZodNumber;
            column: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            line: number;
            column: number;
        }, {
            line: number;
            column: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        start: {
            line: number;
            column: number;
        };
        end: {
            line: number;
            column: number;
        };
    }, {
        start: {
            line: number;
            column: number;
        };
        end: {
            line: number;
            column: number;
        };
    }>>;
}, "strip", z.ZodTypeAny, {
    message: string;
    line: number;
    column: number;
    severity: number;
    type?: string | undefined;
    fix?: {
        range: number[];
        text: string;
    } | undefined;
    ruleId?: string | undefined;
    range?: number[] | undefined;
    data?: unknown;
    index?: number | undefined;
    loc?: {
        start: {
            line: number;
            column: number;
        };
        end: {
            line: number;
            column: number;
        };
    } | undefined;
}, {
    message: string;
    line: number;
    column: number;
    severity: number;
    type?: string | undefined;
    fix?: {
        range: number[];
        text: string;
    } | undefined;
    ruleId?: string | undefined;
    range?: number[] | undefined;
    data?: unknown;
    index?: number | undefined;
    loc?: {
        start: {
            line: number;
            column: number;
        };
        end: {
            line: number;
            column: number;
        };
    } | undefined;
}>;
/**
 * Zod schema for TextlintResult
 */
export declare const TextlintResultSchema: z.ZodObject<{
    filePath: z.ZodString;
    messages: z.ZodArray<z.ZodObject<{
        ruleId: z.ZodOptional<z.ZodString>;
        message: z.ZodString;
        line: z.ZodNumber;
        column: z.ZodNumber;
        severity: z.ZodNumber;
        fix: z.ZodOptional<z.ZodObject<{
            range: z.ZodArray<z.ZodNumber, "many">;
            text: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            range: number[];
            text: string;
        }, {
            range: number[];
            text: string;
        }>>;
        type: z.ZodOptional<z.ZodString>;
        data: z.ZodOptional<z.ZodUnknown>;
        index: z.ZodOptional<z.ZodNumber>;
        range: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        loc: z.ZodOptional<z.ZodObject<{
            start: z.ZodObject<{
                line: z.ZodNumber;
                column: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                line: number;
                column: number;
            }, {
                line: number;
                column: number;
            }>;
            end: z.ZodObject<{
                line: z.ZodNumber;
                column: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                line: number;
                column: number;
            }, {
                line: number;
                column: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        }, {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        }>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        line: number;
        column: number;
        severity: number;
        type?: string | undefined;
        fix?: {
            range: number[];
            text: string;
        } | undefined;
        ruleId?: string | undefined;
        range?: number[] | undefined;
        data?: unknown;
        index?: number | undefined;
        loc?: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        } | undefined;
    }, {
        message: string;
        line: number;
        column: number;
        severity: number;
        type?: string | undefined;
        fix?: {
            range: number[];
            text: string;
        } | undefined;
        ruleId?: string | undefined;
        range?: number[] | undefined;
        data?: unknown;
        index?: number | undefined;
        loc?: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        } | undefined;
    }>, "many">;
    output: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    filePath: string;
    messages: {
        message: string;
        line: number;
        column: number;
        severity: number;
        type?: string | undefined;
        fix?: {
            range: number[];
            text: string;
        } | undefined;
        ruleId?: string | undefined;
        range?: number[] | undefined;
        data?: unknown;
        index?: number | undefined;
        loc?: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        } | undefined;
    }[];
    output?: string | undefined;
}, {
    filePath: string;
    messages: {
        message: string;
        line: number;
        column: number;
        severity: number;
        type?: string | undefined;
        fix?: {
            range: number[];
            text: string;
        } | undefined;
        ruleId?: string | undefined;
        range?: number[] | undefined;
        data?: unknown;
        index?: number | undefined;
        loc?: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        } | undefined;
    }[];
    output?: string | undefined;
}>;
/**
 * Zod schema for TextlintFixResult
 */
export declare const TextlintFixResultSchema: z.ZodObject<{
    filePath: z.ZodString;
    output: z.ZodString;
    messages: z.ZodArray<z.ZodObject<{
        ruleId: z.ZodOptional<z.ZodString>;
        message: z.ZodString;
        line: z.ZodNumber;
        column: z.ZodNumber;
        severity: z.ZodNumber;
        fix: z.ZodOptional<z.ZodObject<{
            range: z.ZodArray<z.ZodNumber, "many">;
            text: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            range: number[];
            text: string;
        }, {
            range: number[];
            text: string;
        }>>;
        type: z.ZodOptional<z.ZodString>;
        data: z.ZodOptional<z.ZodUnknown>;
        index: z.ZodOptional<z.ZodNumber>;
        range: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        loc: z.ZodOptional<z.ZodObject<{
            start: z.ZodObject<{
                line: z.ZodNumber;
                column: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                line: number;
                column: number;
            }, {
                line: number;
                column: number;
            }>;
            end: z.ZodObject<{
                line: z.ZodNumber;
                column: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                line: number;
                column: number;
            }, {
                line: number;
                column: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        }, {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        }>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        line: number;
        column: number;
        severity: number;
        type?: string | undefined;
        fix?: {
            range: number[];
            text: string;
        } | undefined;
        ruleId?: string | undefined;
        range?: number[] | undefined;
        data?: unknown;
        index?: number | undefined;
        loc?: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        } | undefined;
    }, {
        message: string;
        line: number;
        column: number;
        severity: number;
        type?: string | undefined;
        fix?: {
            range: number[];
            text: string;
        } | undefined;
        ruleId?: string | undefined;
        range?: number[] | undefined;
        data?: unknown;
        index?: number | undefined;
        loc?: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        } | undefined;
    }>, "many">;
    applyingMessages: z.ZodArray<z.ZodObject<{
        ruleId: z.ZodOptional<z.ZodString>;
        message: z.ZodString;
        line: z.ZodNumber;
        column: z.ZodNumber;
        severity: z.ZodNumber;
        fix: z.ZodOptional<z.ZodObject<{
            range: z.ZodArray<z.ZodNumber, "many">;
            text: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            range: number[];
            text: string;
        }, {
            range: number[];
            text: string;
        }>>;
        type: z.ZodOptional<z.ZodString>;
        data: z.ZodOptional<z.ZodUnknown>;
        index: z.ZodOptional<z.ZodNumber>;
        range: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        loc: z.ZodOptional<z.ZodObject<{
            start: z.ZodObject<{
                line: z.ZodNumber;
                column: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                line: number;
                column: number;
            }, {
                line: number;
                column: number;
            }>;
            end: z.ZodObject<{
                line: z.ZodNumber;
                column: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                line: number;
                column: number;
            }, {
                line: number;
                column: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        }, {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        }>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        line: number;
        column: number;
        severity: number;
        type?: string | undefined;
        fix?: {
            range: number[];
            text: string;
        } | undefined;
        ruleId?: string | undefined;
        range?: number[] | undefined;
        data?: unknown;
        index?: number | undefined;
        loc?: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        } | undefined;
    }, {
        message: string;
        line: number;
        column: number;
        severity: number;
        type?: string | undefined;
        fix?: {
            range: number[];
            text: string;
        } | undefined;
        ruleId?: string | undefined;
        range?: number[] | undefined;
        data?: unknown;
        index?: number | undefined;
        loc?: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        } | undefined;
    }>, "many">;
    remainingMessages: z.ZodArray<z.ZodObject<{
        ruleId: z.ZodOptional<z.ZodString>;
        message: z.ZodString;
        line: z.ZodNumber;
        column: z.ZodNumber;
        severity: z.ZodNumber;
        fix: z.ZodOptional<z.ZodObject<{
            range: z.ZodArray<z.ZodNumber, "many">;
            text: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            range: number[];
            text: string;
        }, {
            range: number[];
            text: string;
        }>>;
        type: z.ZodOptional<z.ZodString>;
        data: z.ZodOptional<z.ZodUnknown>;
        index: z.ZodOptional<z.ZodNumber>;
        range: z.ZodOptional<z.ZodArray<z.ZodNumber, "many">>;
        loc: z.ZodOptional<z.ZodObject<{
            start: z.ZodObject<{
                line: z.ZodNumber;
                column: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                line: number;
                column: number;
            }, {
                line: number;
                column: number;
            }>;
            end: z.ZodObject<{
                line: z.ZodNumber;
                column: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                line: number;
                column: number;
            }, {
                line: number;
                column: number;
            }>;
        }, "strip", z.ZodTypeAny, {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        }, {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        }>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        line: number;
        column: number;
        severity: number;
        type?: string | undefined;
        fix?: {
            range: number[];
            text: string;
        } | undefined;
        ruleId?: string | undefined;
        range?: number[] | undefined;
        data?: unknown;
        index?: number | undefined;
        loc?: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        } | undefined;
    }, {
        message: string;
        line: number;
        column: number;
        severity: number;
        type?: string | undefined;
        fix?: {
            range: number[];
            text: string;
        } | undefined;
        ruleId?: string | undefined;
        range?: number[] | undefined;
        data?: unknown;
        index?: number | undefined;
        loc?: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        } | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    filePath: string;
    messages: {
        message: string;
        line: number;
        column: number;
        severity: number;
        type?: string | undefined;
        fix?: {
            range: number[];
            text: string;
        } | undefined;
        ruleId?: string | undefined;
        range?: number[] | undefined;
        data?: unknown;
        index?: number | undefined;
        loc?: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        } | undefined;
    }[];
    output: string;
    applyingMessages: {
        message: string;
        line: number;
        column: number;
        severity: number;
        type?: string | undefined;
        fix?: {
            range: number[];
            text: string;
        } | undefined;
        ruleId?: string | undefined;
        range?: number[] | undefined;
        data?: unknown;
        index?: number | undefined;
        loc?: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        } | undefined;
    }[];
    remainingMessages: {
        message: string;
        line: number;
        column: number;
        severity: number;
        type?: string | undefined;
        fix?: {
            range: number[];
            text: string;
        } | undefined;
        ruleId?: string | undefined;
        range?: number[] | undefined;
        data?: unknown;
        index?: number | undefined;
        loc?: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        } | undefined;
    }[];
}, {
    filePath: string;
    messages: {
        message: string;
        line: number;
        column: number;
        severity: number;
        type?: string | undefined;
        fix?: {
            range: number[];
            text: string;
        } | undefined;
        ruleId?: string | undefined;
        range?: number[] | undefined;
        data?: unknown;
        index?: number | undefined;
        loc?: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        } | undefined;
    }[];
    output: string;
    applyingMessages: {
        message: string;
        line: number;
        column: number;
        severity: number;
        type?: string | undefined;
        fix?: {
            range: number[];
            text: string;
        } | undefined;
        ruleId?: string | undefined;
        range?: number[] | undefined;
        data?: unknown;
        index?: number | undefined;
        loc?: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        } | undefined;
    }[];
    remainingMessages: {
        message: string;
        line: number;
        column: number;
        severity: number;
        type?: string | undefined;
        fix?: {
            range: number[];
            text: string;
        } | undefined;
        ruleId?: string | undefined;
        range?: number[] | undefined;
        data?: unknown;
        index?: number | undefined;
        loc?: {
            start: {
                line: number;
                column: number;
            };
            end: {
                line: number;
                column: number;
            };
        } | undefined;
    }[];
}>;
//# sourceMappingURL=schemas.d.ts.map