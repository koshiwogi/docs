// LICENSE : MIT
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _checkEndsWithPeriod = require("check-ends-with-period");
var _textlintRuleHelper = require("textlint-rule-helper");
var japaneseRegExp = /(?:[々〇〻\u3400-\u4DBF\u4E00-\u9FFF\uF900-\uFAFF]|[\uD840-\uD87F][\uDC00-\uDFFF]|[ぁ-んァ-ヶ])/;
/***
 * 典型的な句点のパターン
 * これは`periodMark`と交換しても違和感がないものを登録
 * @type {RegExp}
 */
var classicPeriodMarkPattern = /[。\.]/;
var defaultOptions = {
  // 優先する句点文字
  periodMark: "。",
  // 句点文字として許可する文字列の配列
  // 例外として許可したい文字列を設定する
  // `periodMark`に指定したものは自動的に許可リストに加わる
  allowPeriodMarks: [],
  // 末尾に絵文字を置くことを許可するか
  allowEmojiAtEnd: false,
  // 句点で終わって無い場合に`periodMark`を--fix時に追加するかどうか
  // デフォルトでは自動的に追加しない
  forceAppendPeriod: false,
  // [Note] このオプションは標準外なので隠しオプション扱い
  // [Warning] このオプションはsemverの範囲外なのでいつでも壊れる可能性がある
  // 脚注はチェック対象から外すかどうか(実質Re:View向け)
  // デフォルトでは脚注構文(Re:View)は無視する
  checkFootnote: false
};
var reporter = function reporter(context) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var {
    Syntax,
    RuleError,
    report,
    fixer,
    getSource
  } = context;
  var helper = new _textlintRuleHelper.RuleHelper(context);
  // 優先する句点記号
  var preferPeriodMark = options.periodMark || defaultOptions.periodMark;
  // 優先する句点記号は常に句点として許可される
  var allowPeriodMarks = (options.allowPeriodMarks || defaultOptions.allowPeriodMarks).concat(preferPeriodMark);
  var allowEmojiAtEnd = options.allowEmojiAtEnd !== undefined ? options.allowEmojiAtEnd : defaultOptions.allowEmojiAtEnd;
  var forceAppendPeriod = options.forceAppendPeriod !== undefined ? options.forceAppendPeriod : defaultOptions.forceAppendPeriod;
  // [Note] Un-document option
  var checkFootnote = options.checkFootnote !== undefined ? options.checkFootnote : defaultOptions.checkFootnote;
  // 脚注のNode Typeを定義(TxtASTの定義外)
  var FootnoteNodes = [
  // https://github.com/orangain/textlint-plugin-review
  "Footnote",
  // https://github.com/textlint/textlint/blob/master/packages/%40textlint/markdown-to-ast/src/mapping/markdown-syntax-map.js
  // 実際にはmarkdown-to-astではこれはParagraphを含まないInlineNodeなのであまり意味はない
  "Definition", "footnoteDefinition" // micromark
  ];

  var defaultIgnoredNodeTypes = [Syntax.ListItem, Syntax.Link, Syntax.Code, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis];
  // @ts-expect-error: FootnoteNodes is not defined in textlint types
  var ignoredNodeTypes = defaultIgnoredNodeTypes.concat(checkFootnote ? [] : FootnoteNodes);
  return {
    [Syntax.Paragraph](node) {
      if (helper.isChildNode(node, ignoredNodeTypes)) {
        return;
      }
      var lastNode = node.children[node.children.length - 1];
      if (lastNode === undefined || lastNode.type !== Syntax.Str) {
        return;
      }
      var lastStrText = getSource(lastNode);
      if (lastStrText.length === 0) {
        return;
      }
      // 日本語が含まれていない文章は無視する
      if (!japaneseRegExp.test(lastStrText)) {
        return;
      }
      var {
        valid,
        periodMark,
        index
      } = (0, _checkEndsWithPeriod.checkEndsWithPeriod)(lastStrText, {
        periodMarks: allowPeriodMarks,
        allowEmoji: allowEmojiAtEnd
      });
      // 問題が無い場合は何もしない
      if (valid) {
        return;
      }
      // 文末がスペースである場合はスペースを削除する
      if (/\s/.test(periodMark)) {
        report(lastNode, new RuleError("\u6587\u672B\u304C\"".concat(preferPeriodMark, "\"\u3067\u7D42\u308F\u3063\u3066\u3044\u307E\u305B\u3093\u3002\n\u7406\u7531: \u672B\u5C3E\u306E\u4E0D\u8981\u306A\u7A7A\u767D\u304C\u53E5\u70B9\u306E\u4EE3\u308F\u308A\u306B\u306A\u3063\u3066\u3044\u307E\u305B\u3093\n\u4FEE\u6B63: \u7A7A\u767D\u3092\u524A\u9664\u3057\u3066\u304F\u3060\u3055\u3044"), {
          index,
          fix: fixer.replaceTextRange([index, index + periodMark.length], "")
        }));
        return;
      }
      // 典型的なパターンは自動的に`preferPeriodMark`に置き換える
      // 例) "." であるなら "。"に変換
      if (classicPeriodMarkPattern.test(periodMark)) {
        report(lastNode, new RuleError("\u6587\u672B\u304C\"".concat(preferPeriodMark, "\"\u3067\u7D42\u308F\u3063\u3066\u3044\u307E\u305B\u3093\u3002\n\u7406\u7531: \u65E5\u672C\u8A9E\u6587\u7AE0\u3067\u306F\"").concat(preferPeriodMark, "\"\u3092\u4F7F\u7528\u3057\u307E\u3059\n\u4FEE\u6B63: \"").concat(periodMark, "\"\u3092\"").concat(preferPeriodMark, "\"\u306B\u7F6E\u304D\u63DB\u3048\u3066\u304F\u3060\u3055\u3044"), {
          index: index,
          fix: fixer.replaceTextRange([index, index + preferPeriodMark.length], preferPeriodMark)
        }));
      } else {
        // 句点を忘れているパターン
        if (forceAppendPeriod) {
          // `forceAppendPeriod`のオプションがtrueならば、自動で句点を追加する。
          report(lastNode, new RuleError("\u6587\u672B\u304C\"".concat(preferPeriodMark, "\"\u3067\u7D42\u308F\u3063\u3066\u3044\u307E\u305B\u3093\u3002\n\u7406\u7531: \u53E5\u70B9\u306F\u6587\u306E\u5883\u754C\u3092\u660E\u78BA\u306B\u3057\u3001\u8AAD\u307F\u624B\u306E\u7406\u89E3\u3092\u52A9\u3051\u307E\u3059\n\u4FEE\u6B63: \u9069\u5207\u306A\u6587\u672B\u8868\u73FE\u3067\u6587\u3092\u5B8C\u7D50\u3055\u305B\u3001\u53E5\u70B9\u3092\u8FFD\u52A0\u3057\u3066\u304F\u3060\u3055\u3044\n\u4F8B: \u300C\u301C\u3067\u3059").concat(preferPeriodMark, "\u300D\u300C\u301C\u307E\u3059").concat(preferPeriodMark, "\u300D\u300C\u301C\u3067\u3057\u305F").concat(preferPeriodMark, "\u300D\u306A\u3069"), {
            index: index,
            fix: fixer.replaceTextRange([index + 1, index + 1], preferPeriodMark)
          }));
        } else {
          report(lastNode, new RuleError("\u6587\u672B\u304C\"".concat(preferPeriodMark, "\"\u3067\u7D42\u308F\u3063\u3066\u3044\u307E\u305B\u3093\u3002\n\u7406\u7531: \u53E5\u70B9\u306F\u6587\u306E\u5883\u754C\u3092\u660E\u78BA\u306B\u3057\u3001\u8AAD\u307F\u624B\u306E\u7406\u89E3\u3092\u52A9\u3051\u307E\u3059\n\u4FEE\u6B63: \u9069\u5207\u306A\u6587\u672B\u8868\u73FE\u3067\u6587\u3092\u5B8C\u7D50\u3055\u305B\u3001\u53E5\u70B9\u3092\u8FFD\u52A0\u3057\u3066\u304F\u3060\u3055\u3044\n\u4F8B: \u300C\u301C\u3067\u3059").concat(preferPeriodMark, "\u300D\u300C\u301C\u307E\u3059").concat(preferPeriodMark, "\u300D\u300C\u301C\u3067\u3057\u305F").concat(preferPeriodMark, "\u300D\u306A\u3069"), {
            index: index
          }));
        }
      }
    }
  };
};
var _default = {
  linter: reporter,
  fixer: reporter
};
exports.default = _default;
//# sourceMappingURL=textlint-rule-ja-no-mixed-period.js.map